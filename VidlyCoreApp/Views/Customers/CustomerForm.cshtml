@* /Volumes/MacInternalHD/Development/VisualStudio/UdemyMVC/VidlyCore/VidlyCoreApp/Views/Customers/New.cshtml *@

@model VidlyCoreApp.ViewModels.CustomerFormViewModel

@{
    ViewBag.Title = "Customer Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<br />
@{
    if (Model.Mode == VidlyCoreApp.ViewModels.CustomerFormViewModel.FormMode.New)
    {
        <h2>New Customer</h2>
    }
    else
    {
        <h2>Update Customer Information</h2>
    }
}

@* leverage 'using' to IDispose object returned by Html.BeginForm *@
@* Also, structure form so that Bootstrap can understand and render properly.*@
@* Bootstrap requires this:  <div class="form-group"></div>*@
@using (Html.BeginForm("Save", "Customers"))
{
    @Html.ValidationSummary()
    <div class="row">
        <div class="form-group col-sm-6">
            @Html.LabelFor(m => m.Name)
            @* Use Bootstrap form-control look and feel. Note class is keyword so use '@'*@
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="form-group col-sm-6">
            @Html.LabelFor(m => m.Address)
            @Html.TextBoxFor(m => m.Address, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Address)
        </div>
    </div>

    <div class="row">
        <div class="form-group col-sm-6">
            @Html.LabelFor(m => m.City)
            @Html.TextBoxFor(m => m.City, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.City)
        </div>
        <div class="form-group col-sm-6">
            @Html.LabelFor(m => m.State)
            @Html.TextBoxFor(m => m.State, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.State)
        </div>
    </div>

    <div class="row">
        <div class="form-group col-sm-6">
            @{
                @Html.LabelFor(m => m.MembershipTypeId) @* control text label *@
                var selectList = new SelectList(Model.GetAllMembershipTypes(), "MembershipTypeId", "MembershipName");
                @Html.DropDownListFor(m => m.MembershipTypeId, selectList, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.MembershipTypeId)
            }
        </div>
        <div class="form-group col-sm-6">
            @Html.LabelFor(m => m.BirthDate)
            @Html.TextBoxFor(m => m.BirthDate, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.BirthDate)
        </div>
    </div>

    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.IsSubscribedToNewsletter) Subscribed to Newsletter?
        </label>
    </div>
    @Html.AntiForgeryToken()
    <br />
    <br />
    <button type="submit" class="btn btn-primary">Update Information</button>
    <br />
}

@section Scripts {
    @* In regards to Client Side Validation, this requries adding jquery to the page. *@
    @* This can be done by adding the default validation scripting provided in _ValidationScriptsPartial.cshtml. *@
    @* Visual Studio suggests using <partial> instead of Html.Partial due to "possiblity of deadlocks". *@
    @* This technique of Client Side Validation works for situations where standard validation annotations are used. *@
    @* Since this page uses TWO custom validation annotations, Client Side Validation will not be used. *@
    @* NOTE: Wonder if there is a way to utilize both client and server side validation in core? *@
    @* Html.Partial("_ValidationScriptsPartial") *@
    @* <partial name="_ValidationScriptsPartial" />*@
}